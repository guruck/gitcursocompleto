# lista as configurações globais
git config --global -l

# gerenciamento das configurações globais
git config --global user.name "Fulano de Tal"
git config --global user.email "fulano@de.tal"
git config --global init.defaultBranch main
git config --global core.editor "code --wait"

# inicializa o versionamento de um repositório
git init

# exibe o status do repositório
git status

# adiciona um ou mais arquivos ou todos (., -a, --all)
git add <file>
git add .
git add -a
git add --all

# exibe o que há de modificado entre as versões do arquivo "modified" e o ultimo conhecido, se houver na área "staged" a comparação é realizada por lá, senão é realizada na "unmodified"
git diff
# para realizar a comparação entre a "staged" e "unmodified"
git diff --cached
git diff --staged

# exibe os comits de forma decrescente
git log
git log --oneline
git log <branch> --oneline
git log -2
# exibe as modificações do ultimo commit
git log -p -1
# exibe um resumo dos arquivos alterados nos commits
git log --stat
git log --shortstat

# modifica a mensagem do commit (na realidade o commit cria um novo commit baseado no ultimo HEAD)
git commit --amend -m "alteracao da mensagem do commit"
git commit --amend --no-edit

# DESFAZENDO ALTERAÇÕES
# reverte / navega entre os commits
git checkout <numero do commit>
git checkout main
git checkout <file>
git checkout .

# remove arquivos não rastreados
git clean -f

# remove um ou mais arquivos ou todos
# --cached opção para 'unstage' e remover caminhos apenas do indice se não houver um HEAD
git rm --cached <file>
git rm --cached -rf .
# sem a opção --cached vai apagar literalmente o arquivo
git rm 'd*'
git rm 'd/*'

# salva uma versão do arquivo até o momento do commit
# é possivel comentar em multiplas linhas se não encerrar o (") caso precise detalhar melhor o commit
git commit -m "versao teste"

# descarta as alterações após uma versão do arquivo até o momento do ultimo commit (precisa de um HEAD para funcionar)
git restore <file>
# opção para 'unstage' -> remove a alteração da área preparada para o commit
git restore --staged <file>

# remove todas as alterações realizadas voltando ao ultimo commit (trackeds)
git reset --hard

# para parar de rastrear um arquivo caso adicionado após no gitignore ou rastrear
git update-index --skip-worktree <file>
git update-index --no-skip-worktree <file>

# realizar uma copia de um repositorio local/remoto
git clone repositorio novoRepositorio
git clone https://github.com/usuario/gitcursocompleto.git

# verificar se o repositório está vinculado a um remoto ou não
git remote -v
## origin  https://github.com/usuario/gitcursocompleto.git (fetch)  -> busca informações
## origin  https://github.com/usuario/gitcursocompleto.git (push)   -> envia informações

# adicionar links de repositorios remotos
git remote add <alias> <url do repositorio>
git remote add origin https://github.com/usuario/gitcursocompleto.git

# alterar links de repositorios remotos
git remote set-url <alias> <url do repositorio>
git remote set-url origin https://github.com/usuario/gitcursocompleto.git

# enviar commit para repositorio remoto
git push 
git push --set-upstream origin <nome do ramo>
git push -u origin <nome do ramo>

# restaurar do repositorio remoto
git pull

# listar os ramos no projeto
git branch 
git branch --list

# criar um ramo no projeto
git branch <nome do ramo>
git checkout -b <nome do ramo>
git switch -c <nome do ramo>

# renomear um ramo no projeto
git branch -m <branchAnterior> <novaBranch>
git branch -m <novaBranch> (caso esteja na branch a ser renomeada)

# trocar para um ramo no projeto
git checkout <nome do ramo>
git switch <nome do ramo>

# trocar para um ramo no projeto desfazendo alterações realizadas na branch anterior
# caso tenha adicionado e não commitado, as alterações serão perdidas
git checkout -f <nome do ramo>

# trocar para o ramo anterior usado no projeto
git switch - 

# remover um ramo no projeto LOCAL
git branch -d <nome do ramo>
git branch -D <nome do ramo>

# remover um ramo no projeto REMOTO
## quando executado a remoção remota, é necessário excluir de todos os demais locais distribuidos para garantir que um PUSH não retorne a branch
git push --delete origin <nome do ramo>

# realizar MERGE de um ramo no projeto
git merge <nome do ramo>

# abortar o MERGE de um ramo no projeto
git reset --hard
git merge --abort

# localizar ramo que não foram ou foram MERGEadas no projeto respectivamente
git branch --no-merged
git branch --merged

# criando e listando tags
git tag <nome da tag> 
git tag <nome da tag> <id commit>
git tag -a -m "mensagem" <nome da tag> 
git tag -a -m "mensagem" <nome da tag> <id commit>

git show <nome da tag>
git tag -l
git tag -n

# enviando tags para remoto
git push origin <nome da tag>
git push --tags

# removendo tags
git tag -d <nome da tag> 
git push --delete origin <nome da tag>

#trabalhando com stash
git stash
git stash apply
git stash list

#aplica um stash já removendo da lista
git stash pop
git stash pop <posicao do stash>

#remover um stash da lista
git stash drop
git stash drop <posicao do stash>

#criar branch apartir do stash
git stash branch <nome da branch> <posicao do stash>

#criar remover alias 
git config --global alias.ll 'log --oneline'
git config --global --unset alias.ll

#reverter uma alteração / reverter a reversao
git revert HEAD 
git revert HEAD --no-edit

#apagando commit com reset
git reset --hard HEAD~1
#mescla as alterações dos commits deixando mudanças na area de trabalho
git reset --mixed HEAD~1
#as alterações dos commits vão para area de preparação
git reset --soft HEAD~1

----------------
gerar chave SSH
----------------
ssh-keygen
cd ~/.ssh/
start ~/.ssh/
id_rsa.pub <- chave gerada


